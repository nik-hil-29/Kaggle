{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9973728,"sourceType":"datasetVersion","datasetId":6136419}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install tensorflow-federated","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T02:54:14.664591Z","iopub.execute_input":"2024-11-22T02:54:14.665662Z","iopub.status.idle":"2024-11-22T02:57:48.124176Z","shell.execute_reply.started":"2024-11-22T02:54:14.665571Z","shell.execute_reply":"2024-11-22T02:57:48.121927Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Collecting tensorflow-federated\n  Downloading tensorflow_federated-0.87.0-py3-none-manylinux_2_31_x86_64.whl.metadata (19 kB)\nRequirement already satisfied: absl-py==1.*,>=1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (1.4.0)\nRequirement already satisfied: attrs~=23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (23.2.0)\nCollecting cachetools~=5.3 (from tensorflow-federated)\n  Downloading cachetools-5.5.0-py3-none-any.whl.metadata (5.3 kB)\nRequirement already satisfied: dm-tree==0.1.8 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (0.1.8)\nCollecting dp-accounting==0.4.3 (from tensorflow-federated)\n  Downloading dp_accounting-0.4.3-py3-none-any.whl.metadata (1.8 kB)\nCollecting google-vizier==0.1.11 (from tensorflow-federated)\n  Downloading google_vizier-0.1.11-py3-none-any.whl.metadata (10 kB)\nRequirement already satisfied: grpcio~=1.46 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (1.64.1)\nCollecting jaxlib==0.4.14 (from tensorflow-federated)\n  Downloading jaxlib-0.4.14-cp310-cp310-manylinux2014_x86_64.whl.metadata (2.0 kB)\nCollecting jax==0.4.14 (from tensorflow-federated)\n  Downloading jax-0.4.14.tar.gz (1.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m35.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25h  Installing build dependencies ... \u001b[?25ldone\n\u001b[?25h  Getting requirements to build wheel ... \u001b[?25ldone\n\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25ldone\n\u001b[?25hCollecting ml-dtypes==0.2.*,>=0.2.0 (from tensorflow-federated)\n  Downloading ml_dtypes-0.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (20 kB)\nRequirement already satisfied: numpy~=1.25 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (1.26.4)\nCollecting portpicker~=1.6 (from tensorflow-federated)\n  Downloading portpicker-1.6.0-py3-none-any.whl.metadata (1.5 kB)\nCollecting scipy~=1.9.3 (from tensorflow-federated)\n  Downloading scipy-1.9.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.4/58.4 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hCollecting tensorflow-model-optimization==0.7.5 (from tensorflow-federated)\n  Downloading tensorflow_model_optimization-0.7.5-py2.py3-none-any.whl.metadata (914 bytes)\nCollecting tensorflow-privacy==0.9.0 (from tensorflow-federated)\n  Downloading tensorflow_privacy-0.9.0-py3-none-any.whl.metadata (763 bytes)\nCollecting tensorflow==2.14.*,>=2.14.0 (from tensorflow-federated)\n  Downloading tensorflow-2.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.1 kB)\nRequirement already satisfied: tqdm~=4.64 in /opt/conda/lib/python3.10/site-packages (from tensorflow-federated) (4.66.4)\nCollecting typing-extensions==4.5.*,>=4.5.0 (from tensorflow-federated)\n  Downloading typing_extensions-4.5.0-py3-none-any.whl.metadata (8.5 kB)\nCollecting googleapis-common-protos==1.61.0 (from tensorflow-federated)\n  Downloading googleapis_common_protos-1.61.0-py2.py3-none-any.whl.metadata (1.5 kB)\nRequirement already satisfied: mpmath~=1.2 in /opt/conda/lib/python3.10/site-packages (from dp-accounting==0.4.3->tensorflow-federated) (1.3.0)\nCollecting attrs~=23.1 (from tensorflow-federated)\n  Downloading attrs-23.1.0-py3-none-any.whl.metadata (11 kB)\nRequirement already satisfied: protobuf>=3.6 in /opt/conda/lib/python3.10/site-packages (from google-vizier==0.1.11->tensorflow-federated) (3.20.3)\nCollecting grpcio-tools>=1.35.0 (from google-vizier==0.1.11->tensorflow-federated)\n  Downloading grpcio_tools-1.68.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\nCollecting sqlalchemy<=1.4.20,>=1.4 (from google-vizier==0.1.11->tensorflow-federated)\n  Downloading SQLAlchemy-1.4.20.tar.gz (7.7 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.7/7.7 MB\u001b[0m \u001b[31m95.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: opt_einsum in /opt/conda/lib/python3.10/site-packages (from jax==0.4.14->tensorflow-federated) (3.3.0)\nRequirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (1.6.3)\nRequirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (24.3.25)\nRequirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.5.4)\nRequirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.2.0)\nRequirement already satisfied: h5py>=2.9.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.11.0)\nRequirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (18.1.1)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (21.3)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (70.0.0)\nRequirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (1.16.0)\nRequirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2.4.0)\nCollecting wrapt<1.15,>=1.11.0 (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading wrapt-1.14.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.7 kB)\nRequirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.37.0)\nCollecting tensorboard<2.15,>=2.14 (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading tensorboard-2.14.1-py3-none-any.whl.metadata (1.7 kB)\nCollecting tensorflow-estimator<2.15,>=2.14.0 (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading tensorflow_estimator-2.14.0-py2.py3-none-any.whl.metadata (1.3 kB)\nCollecting keras<2.15,>=2.14.0 (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading keras-2.14.0-py3-none-any.whl.metadata (2.4 kB)\nCollecting packaging (from tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading packaging-22.0-py3-none-any.whl.metadata (3.1 kB)\nRequirement already satisfied: scikit-learn==1.*,>=1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow-privacy==0.9.0->tensorflow-federated) (1.2.2)\nCollecting tensorflow-probability~=0.22.0 (from tensorflow-privacy==0.9.0->tensorflow-federated)\n  Downloading tensorflow_probability-0.22.1-py2.py3-none-any.whl.metadata (13 kB)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn==1.*,>=1.0->tensorflow-privacy==0.9.0->tensorflow-federated) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn==1.*,>=1.0->tensorflow-privacy==0.9.0->tensorflow-federated) (3.5.0)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from portpicker~=1.6->tensorflow-federated) (5.9.3)\nCollecting numpy~=1.25 (from tensorflow-federated)\n  Downloading numpy-1.25.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.6 kB)\nRequirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.43.0)\nINFO: pip is looking at multiple versions of grpcio-tools to determine which version is compatible with other requirements. This could take a while.\nCollecting grpcio-tools>=1.35.0 (from google-vizier==0.1.11->tensorflow-federated)\n  Downloading grpcio_tools-1.67.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.67.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.66.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.66.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.66.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.65.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.65.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\nINFO: pip is still looking at multiple versions of grpcio-tools to determine which version is compatible with other requirements. This could take a while.\n  Downloading grpcio_tools-1.65.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.65.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.64.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.64.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.64.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\nINFO: This is taking longer than usual. You might need to provide the dependency resolver with stricter constraints to reduce runtime. See https://pip.pypa.io/warnings/backtracking for guidance. If you want to abort this run, press Ctrl + C.\n  Downloading grpcio_tools-1.63.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.63.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.3 kB)\n  Downloading grpcio_tools-1.62.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.2 kB)\nCollecting protobuf>=3.6 (from google-vizier==0.1.11->tensorflow-federated)\n  Downloading protobuf-4.25.5-cp37-abi3-manylinux2014_x86_64.whl.metadata (541 bytes)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy<=1.4.20,>=1.4->google-vizier==0.1.11->tensorflow-federated) (3.0.3)\nRequirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2.30.0)\nCollecting google-auth-oauthlib<1.1,>=0.5 (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated)\n  Downloading google_auth_oauthlib-1.0.0-py2.py3-none-any.whl.metadata (2.7 kB)\nRequirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.6)\nRequirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2.32.3)\nRequirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.7.2)\nRequirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.0.4)\nRequirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from tensorflow-probability~=0.22.0->tensorflow-privacy==0.9.0->tensorflow-federated) (5.1.1)\nRequirement already satisfied: cloudpickle>=1.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow-probability~=0.22.0->tensorflow-privacy==0.9.0->tensorflow-federated) (3.0.0)\nRequirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.4.0)\nRequirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (4.9)\nRequirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2.0.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2024.8.30)\nRequirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (2.1.5)\nRequirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (0.6.0)\nRequirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.15,>=2.14->tensorflow==2.14.*,>=2.14.0->tensorflow-federated) (3.2.2)\nDownloading tensorflow_federated-0.87.0-py3-none-manylinux_2_31_x86_64.whl (71.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m71.9/71.9 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading dp_accounting-0.4.3-py3-none-any.whl (104 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m104.8/104.8 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading google_vizier-0.1.11-py3-none-any.whl (721 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m721.6/721.6 kB\u001b[0m \u001b[31m25.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading attrs-23.1.0-py3-none-any.whl (61 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.2/61.2 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading googleapis_common_protos-1.61.0-py2.py3-none-any.whl (230 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m230.9/230.9 kB\u001b[0m \u001b[31m13.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading jaxlib-0.4.14-cp310-cp310-manylinux2014_x86_64.whl (73.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.7/73.7 MB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading ml_dtypes-0.2.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m43.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tensorflow-2.14.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (489.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m489.9/489.9 MB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading tensorflow_model_optimization-0.7.5-py2.py3-none-any.whl (241 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m241.2/241.2 kB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tensorflow_privacy-0.9.0-py3-none-any.whl (323 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m323.2/323.2 kB\u001b[0m \u001b[31m17.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading typing_extensions-4.5.0-py3-none-any.whl (27 kB)\nDownloading cachetools-5.5.0-py3-none-any.whl (9.5 kB)\nDownloading portpicker-1.6.0-py3-none-any.whl (16 kB)\nDownloading scipy-1.9.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (33.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m33.7/33.7 MB\u001b[0m \u001b[31m48.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading numpy-1.25.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.2/18.2 MB\u001b[0m \u001b[31m74.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading grpcio_tools-1.62.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.8/2.8 MB\u001b[0m \u001b[31m68.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading keras-2.14.0-py3-none-any.whl (1.7 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m48.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading packaging-22.0-py3-none-any.whl (42 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m42.6/42.6 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading protobuf-4.25.5-cp37-abi3-manylinux2014_x86_64.whl (294 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m294.6/294.6 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tensorboard-2.14.1-py3-none-any.whl (5.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.5/5.5 MB\u001b[0m \u001b[31m50.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading tensorflow_estimator-2.14.0-py2.py3-none-any.whl (440 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m440.7/440.7 kB\u001b[0m \u001b[31m22.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading tensorflow_probability-0.22.1-py2.py3-none-any.whl (6.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m24.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m:00:01\u001b[0m\n\u001b[?25hDownloading wrapt-1.14.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (77 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.9/77.9 kB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading google_auth_oauthlib-1.0.0-py2.py3-none-any.whl (18 kB)\nBuilding wheels for collected packages: jax, sqlalchemy\n  Building wheel for jax (pyproject.toml) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for jax: filename=jax-0.4.14-py3-none-any.whl size=1535361 sha256=5ebe7cb56e5ee4005b5d13f607a55001b81ccb8ba5bc8621c1855b8a3b80d7ca\n  Stored in directory: /root/.cache/pip/wheels/85/52/e7/dfa571c9f9b879e3facaa1584f52be04c4c3d1e14054ef40ab\n  Building wheel for sqlalchemy (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for sqlalchemy: filename=SQLAlchemy-1.4.20-cp310-cp310-linux_x86_64.whl size=1490640 sha256=746fa7f5cf73145b4085d28065416cbb21d48b4bd78d1ccaa393cf799a87eba5\n  Stored in directory: /root/.cache/pip/wheels/c4/42/20/a958989c470cc1a6fe1d1279b0193f0e508161327fc3d951d9\nSuccessfully built jax sqlalchemy\nInstalling collected packages: wrapt, typing-extensions, tensorflow-estimator, sqlalchemy, protobuf, portpicker, packaging, numpy, keras, cachetools, attrs, tensorflow-probability, tensorflow-model-optimization, scipy, ml-dtypes, grpcio-tools, googleapis-common-protos, jaxlib, jax, google-vizier, google-auth-oauthlib, dp-accounting, tensorboard, tensorflow, tensorflow-privacy, tensorflow-federated\n  Attempting uninstall: wrapt\n    Found existing installation: wrapt 1.16.0\n    Uninstalling wrapt-1.16.0:\n      Successfully uninstalled wrapt-1.16.0\n  Attempting uninstall: typing-extensions\n    Found existing installation: typing_extensions 4.12.2\n    Uninstalling typing_extensions-4.12.2:\n      Successfully uninstalled typing_extensions-4.12.2\n  Attempting uninstall: tensorflow-estimator\n    Found existing installation: tensorflow-estimator 2.15.0\n    Uninstalling tensorflow-estimator-2.15.0:\n      Successfully uninstalled tensorflow-estimator-2.15.0\n  Attempting uninstall: sqlalchemy\n    Found existing installation: SQLAlchemy 2.0.30\n    Uninstalling SQLAlchemy-2.0.30:\n      Successfully uninstalled SQLAlchemy-2.0.30\n  Attempting uninstall: protobuf\n    Found existing installation: protobuf 3.20.3\n    Uninstalling protobuf-3.20.3:\n      Successfully uninstalled protobuf-3.20.3\n  Attempting uninstall: packaging\n    Found existing installation: packaging 21.3\n    Uninstalling packaging-21.3:\n      Successfully uninstalled packaging-21.3\n  Attempting uninstall: numpy\n    Found existing installation: numpy 1.26.4\n    Uninstalling numpy-1.26.4:\n      Successfully uninstalled numpy-1.26.4\n  Attempting uninstall: keras\n    Found existing installation: keras 3.3.3\n    Uninstalling keras-3.3.3:\n      Successfully uninstalled keras-3.3.3\n  Attempting uninstall: cachetools\n    Found existing installation: cachetools 4.2.4\n    Uninstalling cachetools-4.2.4:\n      Successfully uninstalled cachetools-4.2.4\n  Attempting uninstall: attrs\n    Found existing installation: attrs 23.2.0\n    Uninstalling attrs-23.2.0:\n      Successfully uninstalled attrs-23.2.0\n  Attempting uninstall: tensorflow-probability\n    Found existing installation: tensorflow-probability 0.24.0\n    Uninstalling tensorflow-probability-0.24.0:\n      Successfully uninstalled tensorflow-probability-0.24.0\n  Attempting uninstall: scipy\n    Found existing installation: scipy 1.14.1\n    Uninstalling scipy-1.14.1:\n      Successfully uninstalled scipy-1.14.1\n  Attempting uninstall: ml-dtypes\n    Found existing installation: ml-dtypes 0.3.2\n    Uninstalling ml-dtypes-0.3.2:\n      Successfully uninstalled ml-dtypes-0.3.2\n  Attempting uninstall: googleapis-common-protos\n    Found existing installation: googleapis-common-protos 1.63.1\n    Uninstalling googleapis-common-protos-1.63.1:\n      Successfully uninstalled googleapis-common-protos-1.63.1\n  Attempting uninstall: jaxlib\n    Found existing installation: jaxlib 0.4.33\n    Uninstalling jaxlib-0.4.33:\n      Successfully uninstalled jaxlib-0.4.33\n  Attempting uninstall: jax\n    Found existing installation: jax 0.4.33\n    Uninstalling jax-0.4.33:\n      Successfully uninstalled jax-0.4.33\n  Attempting uninstall: google-auth-oauthlib\n    Found existing installation: google-auth-oauthlib 1.2.0\n    Uninstalling google-auth-oauthlib-1.2.0:\n      Successfully uninstalled google-auth-oauthlib-1.2.0\n  Attempting uninstall: tensorboard\n    Found existing installation: tensorboard 2.16.2\n    Uninstalling tensorboard-2.16.2:\n      Successfully uninstalled tensorboard-2.16.2\n  Attempting uninstall: tensorflow\n    Found existing installation: tensorflow 2.16.1\n    Uninstalling tensorflow-2.16.1:\n      Successfully uninstalled tensorflow-2.16.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nalbumentations 1.4.17 requires scipy>=1.10.0, but you have scipy 1.9.3 which is incompatible.\naltair 5.4.1 requires typing-extensions>=4.10.0; python_version < \"3.13\", but you have typing-extensions 4.5.0 which is incompatible.\napache-beam 2.46.0 requires cloudpickle~=2.2.1, but you have cloudpickle 3.0.0 which is incompatible.\napache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\napache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.25.2 which is incompatible.\napache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.5 which is incompatible.\napache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 17.0.0 which is incompatible.\nbigframes 0.22.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.10.0, but you have google-cloud-bigquery 2.34.4 which is incompatible.\nbigframes 0.22.0 requires google-cloud-storage>=2.0.0, but you have google-cloud-storage 1.44.0 which is incompatible.\nbigframes 0.22.0 requires pandas<2.1.4,>=1.5.0, but you have pandas 2.2.3 which is incompatible.\nblis 1.0.1 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.25.2 which is incompatible.\ncesium 0.12.3 requires numpy<3.0,>=2.0, but you have numpy 1.25.2 which is incompatible.\nchex 0.1.87 requires jax>=0.4.27, but you have jax 0.4.14 which is incompatible.\nchex 0.1.87 requires jaxlib>=0.4.27, but you have jaxlib 0.4.14 which is incompatible.\nconda 24.9.0 requires packaging>=23.0, but you have packaging 22.0 which is incompatible.\ndataproc-jupyter-plugin 0.1.79 requires pydantic~=1.10.0, but you have pydantic 2.9.2 which is incompatible.\nfastapi 0.111.0 requires typing-extensions>=4.8.0, but you have typing-extensions 4.5.0 which is incompatible.\nfeaturetools 1.31.0 requires scipy>=1.10.0, but you have scipy 1.9.3 which is incompatible.\nflax 0.9.0 requires jax>=0.4.27, but you have jax 0.4.14 which is incompatible.\ngoogle-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\ngoogle-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\ngoogle-cloud-bigquery 2.34.4 requires packaging<22.0dev,>=14.3, but you have packaging 22.0 which is incompatible.\ngoogle-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.5 which is incompatible.\ngoogle-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.5 which is incompatible.\ngoogle-cloud-datastore 1.15.5 requires protobuf<4.0.0dev, but you have protobuf 4.25.5 which is incompatible.\ngoogle-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.5 which is incompatible.\nibis-framework 7.1.0 requires pyarrow<15,>=2, but you have pyarrow 17.0.0 which is incompatible.\nipython-sql 0.5.0 requires sqlalchemy>=2.0, but you have sqlalchemy 1.4.20 which is incompatible.\njupyterlab 4.2.5 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\njupyterlab-lsp 5.1.0 requires jupyter-lsp>=2.0.0, but you have jupyter-lsp 1.5.1 which is incompatible.\nkaggle-environments 1.14.15 requires scipy>=1.11.2, but you have scipy 1.9.3 which is incompatible.\nkfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\nkfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.5 which is incompatible.\nkfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.5 which is incompatible.\nlibpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\noptax 0.2.3 requires jax>=0.4.27, but you have jax 0.4.14 which is incompatible.\noptax 0.2.3 requires jaxlib>=0.4.27, but you have jaxlib 0.4.14 which is incompatible.\norbax-checkpoint 0.6.4 requires jax>=0.4.26, but you have jax 0.4.14 which is incompatible.\npydantic 2.9.2 requires typing-extensions>=4.6.1; python_version < \"3.13\", but you have typing-extensions 4.5.0 which is incompatible.\npydantic-core 2.23.4 requires typing-extensions!=4.7.0,>=4.6.0, but you have typing-extensions 4.5.0 which is incompatible.\npytoolconfig 1.3.1 requires packaging>=23.2, but you have packaging 22.0 which is incompatible.\nstumpy 1.13.0 requires scipy>=1.10, but you have scipy 1.9.3 which is incompatible.\ntensorflow-decision-forests 1.9.1 requires tensorflow~=2.16.1, but you have tensorflow 2.14.1 which is incompatible.\ntensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.5 which is incompatible.\ntensorflow-serving-api 2.16.1 requires tensorflow<3,>=2.16.1, but you have tensorflow 2.14.1 which is incompatible.\ntensorflow-text 2.16.1 requires tensorflow<2.17,>=2.16.1; platform_machine != \"arm64\" or platform_system != \"Darwin\", but you have tensorflow 2.14.1 which is incompatible.\ntensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.5 which is incompatible.\ntensorstore 0.1.66 requires ml-dtypes>=0.3.1, but you have ml-dtypes 0.2.0 which is incompatible.\ntf-keras 2.16.0 requires tensorflow<2.17,>=2.16, but you have tensorflow 2.14.1 which is incompatible.\nthinc 8.3.2 requires numpy<2.1.0,>=2.0.0; python_version >= \"3.9\", but you have numpy 1.25.2 which is incompatible.\ntorch 2.4.0+cpu requires typing-extensions>=4.8.0, but you have typing-extensions 4.5.0 which is incompatible.\ntsfresh 0.20.3 requires scipy>=1.14.0; python_version >= \"3.10\", but you have scipy 1.9.3 which is incompatible.\ntypeguard 4.3.0 requires typing-extensions>=4.10.0, but you have typing-extensions 4.5.0 which is incompatible.\nwoodwork 0.31.0 requires scipy>=1.10.0, but you have scipy 1.9.3 which is incompatible.\nxarray 2024.9.0 requires packaging>=23.1, but you have packaging 22.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed attrs-23.1.0 cachetools-5.3.3 dp-accounting-0.4.3 google-auth-oauthlib-1.0.0 google-vizier-0.1.11 googleapis-common-protos-1.61.0 grpcio-tools-1.62.3 jax-0.4.14 jaxlib-0.4.14 keras-2.14.0 ml-dtypes-0.2.0 numpy-1.25.2 packaging-22.0 portpicker-1.6.0 protobuf-3.20.3 scipy-1.9.3 sqlalchemy-1.4.20 tensorboard-2.14.1 tensorflow-2.14.1 tensorflow-estimator-2.14.0 tensorflow-federated-0.87.0 tensorflow-model-optimization-0.7.5 tensorflow-privacy-0.9.0 tensorflow-probability-0.22.1 typing-extensions-4.5.0 wrapt-1.14.1\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\n# Tensorflow\nimport tensorflow as tf\nimport tensorflow_federated as tff\n\n# Tensorflow Keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Conv1D\nfrom tensorflow.keras.layers import MaxPooling1D\nfrom tensorflow.keras.utils import to_categorical\n\n# Asynchronous, needed for federated learning \nimport nest_asyncio\nnest_asyncio.apply()\n\n# Others\nimport collections\nimport attr\nimport functools\n\nnp.random.seed(0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T02:59:33.368710Z","iopub.execute_input":"2024-11-22T02:59:33.370159Z","iopub.status.idle":"2024-11-22T02:59:44.317787Z","shell.execute_reply.started":"2024-11-22T02:59:33.370101Z","shell.execute_reply":"2024-11-22T02:59:44.316294Z"}},"outputs":[{"name":"stderr","text":"2024-11-22 02:59:34.977705: E tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:9342] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-11-22 02:59:34.977804: E tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.cc:609] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-11-22 02:59:34.977883: E tensorflow/compiler/xla/stream_executor/cuda/cuda_blas.cc:1518] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:155: UserWarning: A NumPy version >=1.18.5 and <1.26.0 is required for this version of SciPy (detected version 1.26.4\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"## 1. Human activity recognition (HAR) using convolutional neural network (CNN)","metadata":{}},{"cell_type":"markdown","source":"Code reference : [CNN models for human activity recognition time-series classification](https://machinelearningmastery.com/cnn-models-for-human-activity-recognition-time-series-classification/)\n\nCNN algorithm is selected based on [this blog's information](https://machinelearningmastery.com/deep-learning-models-for-human-activity-recognition/), quoted:\n\n    \"When applied to time series classification like HAR, CNN has two advantages over other models: local dependency and scale invariance. Local dependency means the nearby signals in HAR are likely to be correlated, while scale invariance refers to the scale-invariant for different paces or frequencies.\"\n   ([Original source](https://arxiv.org/pdf/1707.03502.pdf))","metadata":{}},{"cell_type":"code","source":"# load the dataset from a client, returns train dataset (X) and label (y) elements\ndef load_dataset(subject_num=1):\n    # import csv\n    df = pd.read_csv('/kaggle/input/dataset-har/mHealth_subject' + str(subject_num+1) + '.csv', header=None)\n    \n    # exclude 0\n    df = df[df[21] != 0]\n    \n    # split to dataset and elements\n    trainy = df[21]\n    df_X = df.drop([21], axis=1)\n    \n    # stack group so that features are the 3rd dimension\n    loaded = list()\n    loaded.append(df_X.values)\n    trainX = np.dstack(loaded)\n    \n    # one hot encode y\n    trainy = to_categorical(trainy)\n                            \n    return trainX, trainy\n\n# Fit and evaluate a model\ndef evaluate_model(trainX, trainy):\n    # set epochs and batch_size to 1 each due to its purpose solely as example and limiting resource\n    # set verbose to 1 to see training progress\n    verbose, epochs, batch_size = 1, 1, 1\n    \n    n_timesteps, n_features, n_outputs = trainX.shape[1], trainX.shape[2], trainy.shape[1]\n    model = Sequential()\n    model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_timesteps,n_features)))\n    model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(MaxPooling1D(pool_size=2))\n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(n_outputs, activation='softmax'))\n    \n    # Set precision and recall to calculate F1 score\n    precision = tf.keras.metrics.Precision(name='precision')\n    recall = tf.keras.metrics.Recall(name='recall')\n    \n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy', precision, recall])\n    \n    # fit network\n    history = model.fit(trainX, trainy, epochs=epochs, batch_size=batch_size, verbose=verbose)\n    \n    # get evaluation metrics\n    accuracy = history.history['accuracy'][epochs-1]\n    precision = history.history['precision'][epochs-1]\n    recall = history.history['recall'][epochs-1]\n    \n    return accuracy, precision, recall\n\n# summarize scores\ndef summarize_results(scores, f1):\n    m, s = np.mean(scores), np.std(scores)\n    m2, s2 = np.mean(f1), np.std(f1)\n    print('Accuracy: %.3f%% (+/-%.3f), F1 score: %.3f%% (+/-%.3f)' % (m, s, m2, s2))\n\n# run an experiment\ndef run_experiment(repeats=5):\n    # load data\n    trainX, trainy = load_dataset()\n    # repeat experiment\n    accuracies = list()\n    f1s = list()\n    for r in range(repeats):\n        accuracy, precision, recall = evaluate_model(trainX, trainy)\n        accuracy = accuracy * 100.0\n        f1_score = (2.0*((precision * recall)/(precision + recall))) * 100.0\n        print('> Iteration #%d: %.3f, F1: %.3f' % (r+1, accuracy, f1_score))\n        accuracies.append(accuracy)\n        f1s.append(f1_score)\n    # summarize results\n    summarize_results(accuracies, f1s)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T03:42:35.355009Z","iopub.execute_input":"2024-11-22T03:42:35.355582Z","iopub.status.idle":"2024-11-22T03:42:35.374138Z","shell.execute_reply.started":"2024-11-22T03:42:35.355539Z","shell.execute_reply":"2024-11-22T03:42:35.372862Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"\nimport matplotlib.pyplot as plt\n# Run an experiment and plot metrics\ndef run_experiment(repeats=5):\n    trainX, trainy = load_dataset()\n    accuracies, precisions, recalls, f1s = [], [], [], []\n    \n    for r in range(repeats):\n        accuracy, precision, recall = evaluate_model(trainX, trainy)\n        f1_score = (2.0 * (precision * recall) / (precision + recall)) * 100.0\n        accuracy, precision, recall = accuracy * 100.0, precision * 100.0, recall * 100.0\n        \n        print(f'> Iteration #{r+1}: Accuracy: {accuracy:.3f}%, F1: {f1_score:.3f}%')\n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1s.append(f1_score)\n    \n    # Summarize results\n    summarize_results(accuracies, f1s)\n    \n    # Plot metrics\n    iterations = range(1, repeats + 1)\n    plt.figure(figsize=(12, 6))\n    # plt.plot(iterations, accuracies, label='Accuracy', marker='o')\n    # plt.plot(iterations, precisions, label='Precision', marker='o')\n    # plt.plot(iterations, recalls, label='Recall', marker='o')\n    plt.plot(iterations, f1s, label='F1-Score', marker='o')\n    plt.xlabel('Iteration')\n    plt.ylabel('Metric (%)')\n    plt.title('Metrics per Iteration')\n    plt.legend()\n    plt.grid()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:03:35.739365Z","iopub.execute_input":"2024-11-22T04:03:35.739823Z","iopub.status.idle":"2024-11-22T04:03:35.751451Z","shell.execute_reply.started":"2024-11-22T04:03:35.739783Z","shell.execute_reply":"2024-11-22T04:03:35.749763Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"# run th%e experiment\nrun_experiment()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:03:37.952985Z","iopub.execute_input":"2024-11-22T04:03:37.953415Z","iopub.status.idle":"2024-11-22T04:08:15.815766Z","shell.execute_reply.started":"2024-11-22T04:03:37.953378Z","shell.execute_reply":"2024-11-22T04:08:15.814172Z"}},"outputs":[{"name":"stdout","text":"18432/18432 [==============================] - 57s 3ms/step - loss: 0.2575 - accuracy: 0.9147 - precision: 0.9233 - recall: 0.9068\n> Iteration #1: Accuracy: 91.466%, F1: 91.499%\n18432/18432 [==============================] - 56s 3ms/step - loss: 0.2452 - accuracy: 0.9200 - precision: 0.9270 - recall: 0.9141\n> Iteration #2: Accuracy: 91.998%, F1: 92.053%\n18432/18432 [==============================] - 55s 3ms/step - loss: 0.2589 - accuracy: 0.9155 - precision: 0.9231 - recall: 0.9075\n> Iteration #3: Accuracy: 91.553%, F1: 91.522%\n18432/18432 [==============================] - 54s 3ms/step - loss: 0.2529 - accuracy: 0.9206 - precision: 0.9284 - recall: 0.9141\n> Iteration #4: Accuracy: 92.057%, F1: 92.116%\n18432/18432 [==============================] - 54s 3ms/step - loss: 0.2580 - accuracy: 0.9166 - precision: 0.9253 - recall: 0.9085\n> Iteration #5: Accuracy: 91.656%, F1: 91.681%\nAccuracy: 91.746% (+/-0.238), F1 score: 91.774% (+/-0.262)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"## 2. Federated learning for HAR using CNN","metadata":{}},{"cell_type":"markdown","source":"Code references :\n1. Previous section\n2. [Tensorflow federated learning homepage and API](https://www.tensorflow.org/federated)\n3. [Google Workshop on Federated Learning and Analytics](https://events.withgoogle.com/demostutorials-workshop-on-federated-learning-and-analytics-2020/)\n4. Our beloved [StackOverflow](https://stackoverflow.com/)","metadata":{}},{"cell_type":"code","source":"# similar to load_dataset() function, but returning tensorflow dataset in batch form\ndef load_client_dataset(client_id=1):\n    # import csv\n    df = pd.read_csv('/kaggle/input/dataset-har/mHealth_subject' + str(client_id) + '.csv', header=None)\n    \n    # exclude 0\n    df = df[df[21] != 0]\n    \n    # split to features (X) and label (y)\n    y = df[21]\n    X = df.drop([21], axis=1)\n    X = np.expand_dims(X, axis=2)\n    \n    # one hot encode y\n    y = to_categorical(y)\n    \n    # create tensorflow dataset\n    dataset = tf.data.Dataset.from_tensor_slices((X,y))\n    dataset = dataset.batch(20) # 20 rows for each batch\n    return dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:17:36.477730Z","iopub.execute_input":"2024-11-22T04:17:36.480404Z","iopub.status.idle":"2024-11-22T04:17:36.494031Z","shell.execute_reply.started":"2024-11-22T04:17:36.478946Z","shell.execute_reply":"2024-11-22T04:17:36.492647Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"# Create federated train data from 8 clients (not randomized for now)\ntrain_data = [load_client_dataset(x) for x in range(1,9)]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:17:38.493569Z","iopub.execute_input":"2024-11-22T04:17:38.494149Z","iopub.status.idle":"2024-11-22T04:17:42.552934Z","shell.execute_reply.started":"2024-11-22T04:17:38.494091Z","shell.execute_reply":"2024-11-22T04:17:42.551687Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"train_data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T03:28:57.882959Z","iopub.execute_input":"2024-11-22T03:28:57.883357Z","iopub.status.idle":"2024-11-22T03:28:57.894816Z","shell.execute_reply.started":"2024-11-22T03:28:57.883320Z","shell.execute_reply":"2024-11-22T03:28:57.893211Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"[<_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>,\n <_BatchDataset element_spec=(TensorSpec(shape=(None, 21, 1), dtype=tf.float64, name=None), TensorSpec(shape=(None, 7), dtype=tf.float32, name=None))>]"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"def create_keras_model():\n    model = Sequential()\n    model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(21,1)))\n    model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(MaxPooling1D(pool_size=2))\n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(7, activation='softmax'))\n    \n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:17:54.141730Z","iopub.execute_input":"2024-11-22T04:17:54.142154Z","iopub.status.idle":"2024-11-22T04:17:54.149112Z","shell.execute_reply.started":"2024-11-22T04:17:54.142119Z","shell.execute_reply":"2024-11-22T04:17:54.147713Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"import tensorflow as tf\nimport tensorflow_federated as tff\n\n# Define your model function\ndef model_fn():\n    keras_model = create_keras_model()\n    return tff.learning.models.from_keras_model(\n          keras_model,\n      input_spec=train_data[0].element_spec,\n      loss=tf.keras.losses.CategoricalCrossentropy(),\n      metrics=[tf.keras.metrics.Accuracy(name='acc'),\\\n               tf.keras.metrics.Precision(name='pr'),\\\n               tf.keras.metrics.Recall(name='rc')\\\n              ])\n\n# Define the client optimizer\nclient_optimizer_fn = tff.learning.optimizers.build_sgdm(learning_rate=0.001)\n\n# Simulate federated learning with federated averaging as model aggregation\ntrainer = tff.learning.algorithms.build_weighted_fed_avg(\n    model_fn=model_fn,\n    client_optimizer_fn=client_optimizer_fn,\n)\n\n# Init\nstate = trainer.initialize()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T03:29:16.389938Z","iopub.execute_input":"2024-11-22T03:29:16.390338Z","iopub.status.idle":"2024-11-22T03:29:19.030333Z","shell.execute_reply.started":"2024-11-22T03:29:16.390300Z","shell.execute_reply":"2024-11-22T03:29:19.029014Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# Simulate \"batch\" learning\nfor i in range(25):\n    # Perform a training step\n    state, metrics = trainer.next(state, train_data)\n    \n   \n    # Access metrics correctly\n    train_metrics = metrics['client_work']['train']\n    acc = train_metrics['acc'] * 100.0\n    pr = train_metrics['pr']\n    rc = train_metrics['rc']\n    f1_score = 2.0 * (pr * rc) / (pr + rc) * 100.0\n\n    # Print results\n    print(f'> Iteration #{i + 1} | Accuracy: {acc:.3f}%, F1 score: {f1_score:.3f}%')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T03:33:21.990876Z","iopub.execute_input":"2024-11-22T03:33:21.991429Z","iopub.status.idle":"2024-11-22T03:39:21.996872Z","shell.execute_reply.started":"2024-11-22T03:33:21.991366Z","shell.execute_reply":"2024-11-22T03:39:21.995491Z"}},"outputs":[{"name":"stdout","text":"> Iteration #1 | Accuracy: 3.382%, F1 score: 97.927%\n> Iteration #2 | Accuracy: 3.650%, F1 score: 98.135%\n> Iteration #3 | Accuracy: 3.849%, F1 score: 98.284%\n> Iteration #4 | Accuracy: 3.926%, F1 score: 98.406%\n> Iteration #5 | Accuracy: 4.141%, F1 score: 98.452%\n> Iteration #6 | Accuracy: 4.207%, F1 score: 98.593%\n> Iteration #7 | Accuracy: 4.201%, F1 score: 98.641%\n> Iteration #8 | Accuracy: 4.397%, F1 score: 98.683%\n> Iteration #9 | Accuracy: 4.113%, F1 score: 98.748%\n> Iteration #10 | Accuracy: 4.175%, F1 score: 98.742%\n> Iteration #11 | Accuracy: 4.218%, F1 score: 98.791%\n> Iteration #12 | Accuracy: 4.201%, F1 score: 98.828%\n> Iteration #13 | Accuracy: 4.225%, F1 score: 98.862%\n> Iteration #14 | Accuracy: 4.246%, F1 score: 98.861%\n> Iteration #15 | Accuracy: 4.188%, F1 score: 98.907%\n> Iteration #16 | Accuracy: 4.211%, F1 score: 98.915%\n> Iteration #17 | Accuracy: 4.339%, F1 score: 98.958%\n> Iteration #18 | Accuracy: 4.222%, F1 score: 98.926%\n> Iteration #19 | Accuracy: 4.335%, F1 score: 98.943%\n> Iteration #20 | Accuracy: 4.167%, F1 score: 98.977%\n> Iteration #21 | Accuracy: 4.119%, F1 score: 98.999%\n> Iteration #22 | Accuracy: 4.199%, F1 score: 98.995%\n> Iteration #23 | Accuracy: 4.057%, F1 score: 98.985%\n> Iteration #24 | Accuracy: 4.005%, F1 score: 99.014%\n> Iteration #25 | Accuracy: 3.991%, F1 score: 99.040%\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"# Store F1 Scores\nf1_scores = []\n\n# Simulate \"batch\" learning for 5 iterations\nfor i in range(5):\n    # Perform a training step\n    state, metrics = trainer.next(state, train_data)\n    \n    # Access metrics correctly\n    train_metrics = metrics['client_work']['train']\n    acc = train_metrics['acc'] * 100.0\n    pr = train_metrics['pr']\n    rc = train_metrics['rc']\n    f1_score = 2.0 * (pr * rc) / (pr + rc) * 100.0\n\n    # Print results\n    print(f'> Iteration #{i + 1} | Accuracy: {acc:.3f}%, F1 score: {f1_score:.3f}%')\n\n    # Append F1 Score for plotting\n    f1_scores.append(f1_score)\n\n# Plot F1 Score vs Iteration\niterations = range(1, 6)\nplt.plot(iterations, f1_scores, marker='o', color='b', label='F1 Score')\nplt.xlabel('Iteration')\nplt.ylabel('F1 Score (%)')\nplt.title('F1 Score across Iterations')\nplt.grid(True)\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-22T04:17:59.875772Z","iopub.execute_input":"2024-11-22T04:17:59.876176Z","iopub.status.idle":"2024-11-22T04:19:14.336808Z","shell.execute_reply.started":"2024-11-22T04:17:59.876145Z","shell.execute_reply":"2024-11-22T04:19:14.335531Z"}},"outputs":[{"name":"stdout","text":"> Iteration #1 | Accuracy: 4.026%, F1 score: 99.023%\n> Iteration #2 | Accuracy: 3.989%, F1 score: 99.041%\n> Iteration #3 | Accuracy: 3.844%, F1 score: 99.060%\n> Iteration #4 | Accuracy: 3.786%, F1 score: 99.046%\n> Iteration #5 | Accuracy: 3.714%, F1 score: 99.066%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":48}]}